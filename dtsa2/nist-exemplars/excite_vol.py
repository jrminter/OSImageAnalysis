# A script for generating images of excitation volumes and phi(rho-z) curves
# comparing Monte Carlo and analytical models.
import java.text as jt
import java.util as ju

nTraj = 10000

tp = epq.TransitionProbabilities.Relax

# Place the sample at the optimal location for the detector
det = findDetector("Bruker 5")
#det=epd.EDSDetector.createPerfectDetector(4096, 10.0, [0.0,0.0,0.012])
origin = epq.SpectrumUtils.getSamplePosition(det.getProperties())
z0 = origin[2]
prz = epq.XPP1991()

try:
    zrange
except NameError:
    zrange=[6,13,22,30,40,50,60,70,80,90]
    
try :
    erange
except NameError:
    erange = [ 10.0, 15.0, 20.0, 25.0, 30.0 ]    

dim = {}
m0 = parseChemicalFormula("B", 1.0)
for e0 in erange:
    dim[e0]=jl.Math.ceil(epq.ElectronRange.KanayaAndOkayama1972.compute(m0, epq.ToSI.keV(e0)) / m0.getDensity()*1.0e6) * 1.0e-6

html = jio.FileWriter("%s/index[%d-%d].html" % (DefaultOutput,zrange[0],zrange[-1]))
html.write("<html>\n")
html.write("<head>\n")
html.write("<title>Excitation Volume</title>\n")
html.write("</head>\n")
html.write("<body>\n")
html.write("<h1>Excitation Volume</h1>\n")
html.write("<p><ul>")
html.write("<li>Density = 1.0 g/cm<sup>3</sup></li>")
html.write("<li>Pure elements</li>")
html.write("<li>Trajectory count = %d</li>" % nTraj)
html.write("<li>Detector = %s</li>" % det)
html.write("<li>Generated by %s at %s</li>" % (jl.System.getProperty("user.name"), jt.DateFormat.getInstance().format(ju.Date(jl.System.currentTimeMillis()))))
html.write("</ul></p>")

for z in zrange:
    if terminated:
        break
    elm = epq.Element.byAtomicNumber(z)
    html.write("<h1>%s - Z = %d</h1>\n" % (elm, z))
    html.write("<table>\n")
    
    for e0 in erange:
        if terminated:
            break
        xrts = []
        rr = dim[e0]
        for sh in range(epq.AtomicShell.K, epq.AtomicShell.MV + 1):
            shell = epq.AtomicShell(elm, sh)
            if shell.getEdgeEnergy() < epq.ToSI.keV(e0):
                trs = tp.getTransitions(shell, 0.001)
                max, best = 0.0, None
                for xrt in trs.keySet():
                    try:
                        if (xrt.getDestinationShell() == sh) and (xrt.getEnergy() > epq.ToSI.eV(100)):
                            w = trs.get(xrt)
                            if w > max:
                                best = xrt
                                max = w
                    except epq.EPQException, e:
                        print e
                if best:
                    xrts.append(best)
        mat = parseChemicalFormula(elm.toAbbrev(), 1.0)
        print "%s at %g keV - %s" % (mat.descriptiveString(1), e0, xrts)
       # Create a simulator and initialize it
        monte = nm.MonteCarloSS()
        monte.setBeamEnergy(epq.ToSI.keV(e0))
        monte.addSubRegion(monte.getChamber(), mat, nm.MultiPlaneShape.createSubstrate([0.0, 0.0, - 1.0], origin))
        # Simple trajectory images
        ti = nm.TrajectoryImage(512, 512, 1.2 * rr)
        ti.setXRange(-0.6 * rr, + 0.6 * rr)
        ti.setYRange(z0 - 0.1 * rr, z0 + 1.1 * rr)
        ti.setMaxTrajectories(100)
        monte.addActionListener(ti)
        # Add event listeners to model characteristic radiation
        xrel = nm.XRayEventListener2(monte, det)
        monte.addActionListener(xrel)
        eisd = {}
        for xrt in xrts:
            ei = nm.EmissionImage(512, 512, xrt)
            ei.setXRange(-0.6 * rr, 0.6 * rr)
            ei.setYRange(z0 - 0.1 * rr, z0 + 1.1 * rr)
            ei.setEmission(0)
            xrel.addActionListener(ei)
            eisd[xrt] = ei
        xra = nm.XRayAccumulator(xrts)
        xrel.addActionListener(xra)
        prz = nm.PhiRhoZ(xrel, z0 - 0.1 * rr, z0 + 1.1 * rr, 120)
        xrel.addActionListener(prz)
        det.reset()
        monte.runMultipleTrajectories(nTraj)
        base = "%s/E0 = %0.0f keV/Z=%02d [%s]" % (DefaultOutput, e0, z, mat)
        jio.File(base).mkdirs()
        ti.dumpToFile(base)
        wr = jio.FileWriter("%s\PRZ.csv" % base, 0)
        prz.write(wr)
        wr.close()
        html.write(" <tr><th>E0 = %0.0f keV<br> FOV = %0.1f &micro;m</th>" % (e0,rr*1.2e6))
        fn = "E0 = %0.0f keV/Z=%02d [%s]/trajectory.png" % (e0, z, mat)
        html.write("<td><a href=\"%s\"><img src=\"%s\" width=\"256\"/></a></td>" % (fn, fn))
        for xrt in xrts:
            ei = eisd[xrt]
            fn = "E0 = %0.0f keV/Z=%02d [%s]/%s.png" % (e0, z, mat, xrt)
            ei.dumpToFile("%s/E0 = %0.0f keV/Z=%02d [%s]" % (DefaultOutput, e0, z, mat))
            html.write("<td><a href=\"%s\"><img src=\"%s\" width=\"256\"/></a></td>" % (fn, fn))
        html.write(" </tr>\n")
    html.write(" <tr><th>Energy</th><th>Trajectory</th>")
    for xrt in xrts:
        html.write("<th>%s</th>" % xrt)
    html.write(" </tr>\n")
    html.write("</table>\n")
html.write("</body>");
html.close()